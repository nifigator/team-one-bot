{
  "name": "transliteration",
  "version": "0.1.1",
  "description": "Transliteration module for node.js. Transliterates special unicode characters into corresponding ascii code so it can be safely used as URL slag or filename",
  "main": "lib/transliteration.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/andyhu/node-transliteration.git"
  },
  "keywords": [
    "transliterate",
    "transliteration",
    "string",
    "slug",
    "slugify"
  ],
  "author": {
    "name": "Andy Hu"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/andyhu/node-transliteration/issues"
  },
  "readme": "# Transliteration\n\nTransliteration module for node.js. Can be used to transliterate unicode text into corresponding ascii characters, with support of nearly every common languages including CJK (Chinese, Japanese and Korean).\n\n## Install\n\n```\nnpm install transliteration\n```\n\n## Usage\n\n### transliteration(str, [unknown])\n\nTransliterate the string `str`. Characters which this module doesn't recognise will be converted to the character in the `unknown` parameter, defaults to `?`.\n\n__Example__\n```javascript\nvar tr = require('transliteration');\ntr('你好，世界'); // Ni Hao ,Shi Jie\ntr('Γεια σας, τον κόσμο'); // Geia sas, ton kosmo\ntr('안녕하세요, 세계'); // annyeonghaseyo, segye\n```\n\n### slugify(str, options)\n\nConverts unicode string to slugs. So it can be safely used in URL or file name.\n\n__Options:__\n```\n{\n  lowercase: true,\n  separator: '-'\n}\n```\nIf no `options` parameter provided it will use the above default values.\n\n__Example:__\n```javascript\nvar slugify = require('transliteration').slugify;\nslugify('你好，世界'); // ni-hao-shi-jie\nslugify('你好，世界', {lowercase: false, separator: '_'}); // Ni_Hao_Shi_Jie\n```\n\n### Client side usage\nTransliteration module can be run in the browser as well.\n\nDonload the library with bower:\n```\nbower install transliteration\n```\nIt supports AMD / CommonJS standard or just to be loaded as a global variable.\n\nWhen use in the browser, by default it will create global variables under `window` object:\n```javascript\nTR('你好, World'); // window.TR\n// or\nTransliteration('String'); // window.Transliteration\n```\nIf you don't like the default variable names or they conflict with other libraries, you can call noConfilict() method before loading other libraries, then both `window.TR` and `window.Transliteration` will be deleted from windows object and Transliteration function will be returned:\n```javascript\nvar trans = Transliteration.noConflict();\ntrans('你好, World');\ntrans.slugify('你好, World');\n```\n\nFor detailed usage, please check example.html.\n",
  "readmeFilename": "README.md",
  "_id": "transliteration@0.1.1",
  "dist": {
    "shasum": "7fa373219fc9e68edf56604ad9c27ddff5037ff6"
  },
  "_from": "transliteration@",
  "_resolved": "https://registry.npmjs.org/transliteration/-/transliteration-0.1.1.tgz"
}
